<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://kejdev.github.io/</id><title>🍗 양념치킨 🍗</title><subtitle></subtitle> <updated>2022-08-08T21:15:32+08:00</updated> <author> <name>KEJdev</name> <uri>https://kejdev.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://kejdev.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://kejdev.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator> <rights> © 2022 KEJdev </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Deep Learning에서의 DAG구조</title><link href="https://kejdev.github.io/posts/ml-directed-acyclic-graph/" rel="alternate" type="text/html" title="Deep Learning에서의 DAG구조" /><published>2022-08-07T15:00:00+08:00</published> <updated>2022-08-07T15:00:00+08:00</updated> <id>https://kejdev.github.io/posts/ml-directed-acyclic-graph/</id> <content src="https://kejdev.github.io/posts/ml-directed-acyclic-graph/" /> <author> <name>KEJdev</name> </author> <category term="Machine Learning" /> <category term="ML" /> <summary> DAG는 Directed Acyclic Graph의 약자이다. 순환 그래프가 아닌 비순환 그래프를 말하며, 순환하는 싸이클은 존재하지 않고 일방향성만 가진다. 그래프 종류와 딥러닝에서의 DAG구조에 대해 알아보자. Graph 종류 그래프에 대해 전부 다루게 되면 논점이 흐리게 될 것 같아, 무방향 그래프(Undirected Graph)와 방향 그래프(Directed Graph)만 간단하게 다룰 것이다. 무방향 그래프 (Undirected Graph) 무방향 그래프는 말 그대로 방향이 없는 그래프를 말한다. 간선을 통해 노드는 양방향으로 갈 수 있다. 방향 그래프 (Directed Graph) 방향 그래프는 간선에 방향이 있는 그래프를 말한다. 사이클(Cycle)과 비순환 그래프 (... </summary> </entry> <entry><title>깃블로그 지킬테마 고르는 Tip</title><link href="https://kejdev.github.io/posts/blog-jekyll-tip/" rel="alternate" type="text/html" title="깃블로그 지킬테마 고르는 Tip" /><published>2022-08-04T15:00:00+08:00</published> <updated>2022-08-04T15:00:00+08:00</updated> <id>https://kejdev.github.io/posts/blog-jekyll-tip/</id> <content src="https://kejdev.github.io/posts/blog-jekyll-tip/" /> <author> <name>KEJdev</name> </author> <category term="ETC" /> <category term="log" /> <summary> 나는 깃블로그 운영한지 이제 4년째 되어가는데, 이번에 블로그 CSS공사하면서 느낀점과 지킬테마에 대한 약간의 팁을 적어볼까한다. 우선 지킬테마는 여기에서 보면 되고, 마음에 드는 테마를 골라서 커스텀해서 사용하면 된다. 나같은 경우에는 최소 4번 이상의 지킬테마를 바꾸고 커스텀한 경험이 있다… 처음 지킬테마 고를 때, 잡지 같은 느낌을 원해서 무작정 디자인이 예쁜 테마 고르기에만 했었는데, 단점이 있다. 위 같은 테마를 고르게 되면 포스팅할 때, 무조건 이미지 넣어야 한다.. ㅎㅎ..(내 첫번째 지킬테마) 그것도 모르고 처음엔 좋다고 했다가 나중에 결국 커스텀한답시고 썸네일 기능 다 삭제하느라 힘들었던 것 같다. Tip 1. 나에게 필요한 기능 추리기 2. 커스텀하기 쉬운 테마 고르... </summary> </entry> <entry><title>파이썬 for-else 사용하기</title><link href="https://kejdev.github.io/posts/python-for-else/" rel="alternate" type="text/html" title="파이썬 for-else 사용하기" /><published>2022-07-12T14:00:00+08:00</published> <updated>2022-08-02T23:27:54+08:00</updated> <id>https://kejdev.github.io/posts/python-for-else/</id> <content src="https://kejdev.github.io/posts/python-for-else/" /> <author> <name>KEJdev</name> </author> <category term="Program Language" /> <category term="Python" /> <summary> if문에는 else문이 있는데, else는 for문에도 있다. 친숙하지 않겠지만, 사용법을 이해하면 유용하게 사용할 수 있다. for-else 보통 for문은 아래와 같이 사용한다. for n in range(2, 10): for x in range(2, n): if n % x == 0: print(n, 'equals', x, '*', n//x) break # output : 4 equals 2 * 2 6 equals 2 * 3 8 equals 2 * 4 9 equals 3 * 3 위 코드는 공식 문서에서 가져온 간단한 예시고, 소수를 찾는 코드이다. 여기서 else를 사용하면 아래와 같이 출력이 해볼 수 있다. for n ... </summary> </entry> <entry><title>Anconda 가상환경 구축 후, env name 사라지는 현상</title><link href="https://kejdev.github.io/posts/conda-env-name-missing/" rel="alternate" type="text/html" title="Anconda 가상환경 구축 후, env name 사라지는 현상" /><published>2022-07-03T14:00:00+08:00</published> <updated>2022-08-04T22:46:49+08:00</updated> <id>https://kejdev.github.io/posts/conda-env-name-missing/</id> <content src="https://kejdev.github.io/posts/conda-env-name-missing/" /> <author> <name>KEJdev</name> </author> <category term="Error" /> <category term="Python" /> <summary> 평소 keras만 쓰다가, 갑자기 pytorch를 써야되서 conda 환경 하나 팠다. 그리고 몇칠 후, 다른 환경으로 가려고 평소 쓰던 환경으로 conda activate [env name]을 쳤는데, 안된다? 급히 conda env list 명령어로 확인하니, 이름이 사라진 것을 보게 되었다. 진짜 이름만 사라져서 당황… 확인해보니, [env name] 에 직접 경로를 입력해주니까 해당 환경으로 들어가지는데, 그래도 근본적인 문제를 해결해야지. stackoverflow에서는 conda update 하라고 했는데, 나는 소용없었고, conda config --add envs_dirs &amp;lt;path to envs&amp;gt; 명령어로 해결하였다. 좀더 찾아보니, 가끔 conda에서 업데이트... </summary> </entry> <entry><title>프로그래밍의 패러다임에 대해 알아보자</title><link href="https://kejdev.github.io/posts/Multi-Paradigm-Languages/" rel="alternate" type="text/html" title="프로그래밍의 패러다임에 대해 알아보자" /><published>2022-06-23T14:00:00+08:00</published> <updated>2022-08-04T22:46:49+08:00</updated> <id>https://kejdev.github.io/posts/Multi-Paradigm-Languages/</id> <content src="https://kejdev.github.io/posts/Multi-Paradigm-Languages/" /> <author> <name>KEJdev</name> </author> <category term="CS" /> <summary> 저번 포스팅에서 파이썬은 ‘멀티 패러다임’ 이라고 말했다. 오늘은 그에 대해 조금 더 자세히 이야기 해볼까한다. 프로그래밍 패러다임 프로그래밍의 패러다임이란, 개발자가 코드를 짤 때, 어떤 관점을 가지고 짜느냐에 결정적인 역활을 한다. 크게 선언형과 명령형으로 나눌 수 있고, 이 안에는 객체 지향과 절차 지향, 함수형 프로그래밍이 포함되어 있다. 명령형 프로그래밍 : 절차 지향 프로그래밍, 객체 지향 프로그래밍 알고리즘을 명시하고 목표는 명시하지 않음. 선언형 프로그래밍 : 함수형 프로그래밍 알고리즘을 명시하지 않고 목표만 명시함. 사람이 횡단보도를 건너는 프로그래밍을 짠다고 가정한다면 아래와 같이 볼 수 있다. ... </summary> </entry> </feed>
